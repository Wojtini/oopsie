- name: Set deploy dir
  delegate_to: localhost
  set_fact:
    deploy_dir: "{{ instances_dir }}/{{ instance_name }}"
    source_dir: "{{ role_path }}/templates/{{ instance_config.project_dir }}"

- name: Create dir
  file:
    path: "{{ deploy_dir }}" # yaml already prevent duplicates
    state: directory

- name: Get list of files in config dir
  delegate_to: localhost
  become: false
  find:
    paths: "{{ source_dir }}"
    file_type: file
    recurse: true
  register: all_files

- name: Filter files
  delegate_to: localhost
  set_fact:
    j2_files: "{{ all_files.files | selectattr('path', 'search', '\\.j2$') | map(attribute='path') | list }}"
    non_j2_files: "{{ all_files.files | rejectattr('path', 'search', '\\.j2$') | map(attribute='path') | list }}"

- name: Show value of a variable
  delegate_to: localhost
  debug:
    msg:
      normal: "{{ non_j2_files }}"
      j2: "{{ j2_files }}"

- name: Ensure destination directories exist
  file:
    path: "{{ deploy_dir }}/{{ file.path | regex_replace('^' + source_dir + '/', '') | dirname }}"
    state: directory
    recurse: true
  loop: "{{ all_files.files }}"
  loop_control:
    loop_var: file
    label: "{{ file.path }}"

- name: Template .j2 files
  template:
    src: "{{ template }}"
    dest: "{{ deploy_dir }}/{{ template | regex_replace('^' + source_dir + '/', '') | regex_replace('\\.j2$', '') }}"
    mode: '0644'
  register: j2_render
  loop: "{{ j2_files }}"
  loop_control:
    loop_var: template

- name: Copy non-template files
  copy:
    src: "{{ file }}"
    dest: "{{ deploy_dir }}/{{ file | regex_replace('^' + source_dir + '/', '') }}"
    mode: '0644'
  register: non_j2_copy
  loop: "{{ non_j2_files }}"
  loop_control:
    loop_var: file

- name: Check if any file changed
  set_fact:
    any_changed: "{{ (j2_render.results | selectattr('changed') | list) | length > 0 or (non_j2_copy.results | selectattr('changed') | list) | length > 0 }}"

- name: Start docker compose
  community.docker.docker_compose_v2:
    project_src: "{{ deploy_dir }}"
    state: present
    recreate: always
    remove_orphans: true
  when: any_changed
